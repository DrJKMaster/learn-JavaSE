Java 中
正则表达式中的 \ 同样需要转义
简单理解为正则表达式中的 \\ 等同于 \ 即可

元字符（匹配某些字符时需要转义）

一、转义字符
\
    将下一个字符标记为一个特殊字符
    将一个元字符转为原义
    一个 八/十六 进制转义符
    反向引用

二、定位符
^
    匹配输入字符串的开始位置
    如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 '\n' 或 '\r' 之后的位置
$
    匹配输入字符串的结束位置
    如果设置了 RegExp 对象的 Multiline 属性，$ 也匹配 '\n' 或 '\r' 之前的位置
\b
    匹配单词的开始或结束
\B
    匹配单词的其他位置

三、限定符
*
    匹配前面的子表达式零次或多次
+
    匹配前面的子表达式一次或多次
?
    匹配前面的子表达式零次或一次
{n}
    匹配前面的子表达式n次
{n,}
    匹配前面的子表达式至少n次
{n,m}
    匹配前面的子表达式至少n次，至多m次

四、贪婪与懒惰
?
    如果紧跟在限定符的后面，则为非贪婪模式，匹配尽可能少的字符
    反之默认为贪婪模式，匹配尽可能多的字符

五、匹配
.
    匹配除换行符（\n、\r）之外的任何单个字符
x|y
    匹配 x 或 y
[xyz]
    匹配 x、y 或 z
    [] 中的所有特殊字符视为普通字符
[^xyz]
    匹配除 x、y 或 z 之外的任何单个字符
[x-z]
    匹配从 x 到 z 之间的任何单个字符
[^x-z]
    匹配除从 x 到 z 之间的任何单个字符之外的任何单个字符
[x-zA-Z0-9]
    匹配从 x 到 z 或 A 到 Z 或 0 到 9 之间的任何单个字符
\d
    匹配数字
\D
    匹配非数字
\s
    匹配空白字符，包括空格、制表符、换页符等等
\S
    匹配非空白字符
\w
    匹配字母、数字、下划线
\W
    匹配非字母、数字、下划线
\n
    匹配换行符
\r
    匹配回车符
\t
    匹配制表符
\f
    匹配换页符
\0
    匹配空字符

六、子匹配
(pattern)
    匹配 pattern 并获取匹配结果
(?<name>pattern)
    命名捕获，匹配 pattern 并获取匹配结果
    <> 也可以替换为 ''
    使用方法为 matcher.group(name)
(?:pattern)
    匹配 pattern，但不获取匹配结果
    例
    "industr(?:y|ies)" 同 "industry|industries"
(?=pattern)
    正向肯定预查，匹配 pattern 并获取匹配结果，但不捕获该匹配结果
    例
    regStr = "Windows(?=95|98|NT|2000)"
    能匹配 "Windows2000" 中的 "Windows"，但不能匹配 "Windows3.1" 中的 "Windows"
    预查不消耗字符，例如在该例子中，下一次查找会从 "Windows" 的下一个字符开始查找
(?!pattern)
    正向否定预查，匹配 pattern，但不获取匹配结果（排除该匹配结果），与 (?=pattern) 相反
    例
    regStr = "Windows(?!95|98|NT|2000)"
    能匹配 "Windows3.1" 中的 "Windows"，但不能匹配 "Windows2000" 中的 "Windows"
    预查不消耗字符，例如在该例子中，下一次查找会从 "Windows" 的下一个字符开始查找
(?<=pattern)
    反向肯定预查，匹配 pattern 并获取匹配结果，但不捕获该匹配结果
    例
    regStr = "(?<=95|98|NT|2000)Windows"
    能匹配 "2000Windows" 中的 "Windows"，但不能匹配 "3.1Windows" 中的 "Windows"
(?<!pattern)
    反向否定预查，匹配 pattern，但不获取匹配结果（排除该匹配结果），与 (?<=pattern) 相反
    例
    regStr = "(?<!95|98|NT|2000)Windows"
    能匹配 "3.1Windows" 中的 "Windows"，但不能匹配 "2000Windows" 中的 "Windows"

七、Java 特有？
(?i)
    后跟匹配字符如 abc 等，表示忽略大小写
    例
    (?i)abc：匹配 ABCabc
    a(?i)bc：匹配 BCabc
    a((?i)b)c：匹配 Babc